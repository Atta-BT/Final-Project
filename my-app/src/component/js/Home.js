// src/component/js/Home.js
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { onAuthStateChanged, signInWithEmailAndPassword } from 'firebase/auth';
import { ref, query, orderByChild, limitToLast, onValue, get } from 'firebase/database';
import { auth, rtdb } from '../firebase';

import '../css/home.css';
import '../css/Sidebar.css';

import cloud from '../image/cloudy.png';
import {
  MenuOutlined,
  CloseOutlined,
  LogoutOutlined,
  FileTextOutlined,
  DashboardOutlined,
  SettingOutlined
} from '@ant-design/icons';

import SensorCards from '../js/SenSorCard';

const Home = () => {
  const navigate = useNavigate();
  // üîß ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏´‡∏ô‡∏î‡πÉ‡∏ô RTDB
  const cabinetId = 'CABINET_001';

  // --------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö/RTDB ----------
  const [rtdbLoading, setRtdbLoading] = useState(true);
  const [rtdbError, setRtdbError] = useState(null);
  const [connected, setConnected] = useState(true);
  const [lastTs, setLastTs] = useState(null);
  const [hadHistory, setHadHistory] = useState(false); // ‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏´‡∏°
  const STALE_MS = 2 * 60 * 1000;
  const isStale = lastTs ? (Date.now() - lastTs) > STALE_MS : false;
  const hasData = lastTs !== null; // ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô state (‡∏°‡∏≤‡∏à‡∏≤‡∏Å get() ‡∏´‡∏£‡∏∑‡∏≠ onValue())

  // --------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ UI/‡πÄ‡∏°‡∏ô‡∏π ----------
  const [menuOpen, setMenuOpen] = useState(false);
  const [currentTime, setCurrentTime] = useState('');

  // --------- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ----------
  const [powerOn] = useState(true);
  const [battery] = useState(90);
  const [rain, setRain] = useState(false);
  const [lux, setLux] = useState(0);
  const [temp, setTemp] = useState(0);
  const [humidity, setHumidity] = useState(0);

  // --------- ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ----------
  const [weather, setWeather] = useState(null);
  const API_KEY = '34981978fff745c0af2bfd42f12172e0'; // ‡πÉ‡∏™‡πà API Key ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  const city = 'Hat Yai';

  const handleLogout = () => {
    navigate('/');
  };

  // ‡πÄ‡∏ß‡∏•‡∏≤ (‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô header)
  useEffect(() => {
    const updateTime = () => {
      const now = new Date();
      const formatted = now.toLocaleString('th-TH', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
      });
      setCurrentTime(formatted);
    };
    updateTime();
    const timer = setInterval(updateTime, 1000);
    return () => clearInterval(timer);
  }, []);

  // ‡∏î‡∏∂‡∏á‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  useEffect(() => {
    const fetchWeather = async () => {
      try {
        const res = await fetch(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${API_KEY}&lang=en`
        );
        const data = await res.json();  
        setWeather({
          temp: data?.main?.temp,
          humidity: data?.main?.humidity,
          description: data?.weather?.[0]?.description,
          icon: data?.weather?.[0]?.icon,
        });
      } catch (err) {
        console.error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏î‡πâ:', err);
      }
    };
    fetchWeather();
  }, []); // eslint-disable-line react-hooks/exhaustive-deps

  // ‡∏ü‡∏±‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTDB (.info/connected)
  useEffect(() => {
    const cRef = ref(rtdb, '.info/connected');
    const off = onValue(cRef, (snap) => setConnected(!!snap.val()));
    return () => off();
  }, []);

  // ---------- ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô Email/Password -> prefill ‡∏î‡πâ‡∏ß‡∏¢ get() -> ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ subscribe RTDB ----------
  useEffect(() => {
    // ‚ùó ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å .env/‡∏ü‡∏≠‡∏£‡πå‡∏°)
    const EMAIL = 'projectiot2568@gmail.com';
    const PASSWORD = '0611914120h';

    // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Email/Password
    signInWithEmailAndPassword(auth, EMAIL, PASSWORD).catch((e) => {
      console.error('Auth error:', e.code, e.message);
      setRtdbLoading(false);
      setRtdbError(
        (e.code === 'auth/invalid-login-credentials' || e.code === 'auth/invalid-credential')
          ? '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö config ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
          : `Auth error: ${e?.message || 'unknown'}`
      );
    });

    const unsubAuth = onAuthStateChanged(auth, async (user) => {
      if (!user) return;

      const listRef = ref(rtdb, `sensorsData/${cabinetId}`);
      const qLatest = query(listRef, orderByChild('timestamp'), limitToLast(1));

      try {
        // 1) prefill: ‡∏î‡∏∂‡∏á ‚Äú‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‚Äù ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        const once = await get(qLatest);
        if (once.exists()) {
          const obj = once.val();
          const last = Array.isArray(obj)
            ? obj.filter(Boolean).slice(-1)[0]
            : Object.values(obj).slice(-1)[0];

          if (last && typeof last === 'object') {
            setTemp(typeof last.temperature === 'number' ? Math.round(last.temperature) : null);
            setHumidity(typeof last.humidity === 'number' ? Math.round(last.humidity) : null);
            setLux(typeof last.lightIntensity === 'number' ? Math.round(last.lightIntensity) : null);
            setRain(typeof last.rainDetected === 'boolean' ? last.rainDetected : null);

            let tsMs = null;
            if (typeof last.timestamp === 'number') {
              tsMs = last.timestamp;
            } else if (last.timestamp) {
              const parsed = Date.parse(last.timestamp);
              tsMs = Number.isFinite(parsed) ? parsed : null;
            }
            setLastTs(Number.isFinite(tsMs) ? tsMs : null);
            setHadHistory(true);
          }
        } else {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á ‡πÜ
          setHadHistory(false);
        }
      } catch (e) {
        console.error('Prefill get() error:', e);
        setRtdbError(e?.message || 'RTDB get error');
      } finally {
        // ‡∏à‡∏ö‡∏Ç‡∏±‡πâ‡∏ô prefill
        setRtdbLoading(false);
      }

      // 2) subscribe: ‡∏ü‡∏±‡∏á real-time ‡∏ï‡πà‡∏≠ (‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤‡∏ñ‡πâ‡∏≤ snapshot ‡∏ß‡πà‡∏≤‡∏á)
      const unsubRTDB = onValue(
        qLatest,
        (snap) => {
          if (!snap.exists()) {
            // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‚Üí ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ
            return;
          }
          const obj = snap.val();
          const last = Array.isArray(obj)
            ? obj.filter(Boolean).slice(-1)[0]
            : Object.values(obj).slice(-1)[0];

          if (!last || typeof last !== 'object') return;

          setTemp(typeof last.temperature === 'number' ? Math.round(last.temperature) : null);
          setHumidity(typeof last.humidity === 'number' ? Math.round(last.humidity) : null);
          setLux(typeof last.lightIntensity === 'number' ? Math.round(last.lightIntensity) : null);
          setRain(typeof last.rainDetected === 'boolean' ? last.rainDetected : null);

          let tsMs = null;
          if (typeof last.timestamp === 'number') {
            tsMs = last.timestamp;
          } else if (last.timestamp) {
            const parsed = Date.parse(last.timestamp);
            tsMs = Number.isFinite(parsed) ? parsed : null;
          }
          setLastTs(Number.isFinite(tsMs) ? tsMs : null);
          setHadHistory(true);
          setRtdbError(null);
        },
        (err) => {
          setRtdbError(err?.message || 'RTDB error');
        }
      );

      return () => unsubRTDB();
    });

    return () => unsubAuth();
  }, [cabinetId]);

  return (
    <div className="container">
      <header>
        <div className="menu" onClick={() => setMenuOpen(true)}>
          <MenuOutlined />
        </div>

        {menuOpen && (
          <>
            <div className="side-menu">
              <div>
                <div className="menu-header">
                  <h2>USER1</h2>
                  <CloseOutlined className="close-icon" onClick={() => setMenuOpen(false)} />
                </div>

                <ul className="menu-list">
                  <li><FileTextOutlined /> HISTORY</li>
                  <li><DashboardOutlined /> DASHBOARD</li>
                  <li><SettingOutlined /> SETTING</li>
                </ul>
              </div>

              <div className="logout">
                <button className="logout-btn" onClick={handleLogout}>
                  <LogoutOutlined /> LOGOUT
                </button>
              </div>
            </div>
            <div className="menu-overlay" onClick={() => setMenuOpen(false)} />
          </>
        )}

        <h1><span className="highlight">HOME</span> AUTODRY</h1>
        <div className="user-info">
          <h1 className="username">USER1</h1>
          <h2 className="datetime">{currentTime}</h2>
        </div>
      </header>

      {/* ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® */}
      <section className="weather-summary">
        {weather ? (
          <div className="weather-card">
            <div className="weather-top">
              <div className="weather-left">
                <div className="temp-big">{Math.round(weather.temp)}¬∞C</div>
                <div className="desc">{weather.description}</div>
                <div className="date">
                  {new Date().toLocaleDateString('en-GB', {
                    weekday: 'short',
                    month: 'short',
                    day: 'numeric',
                  })}
                </div>
              </div>
              <div className="weather-icon">
                <img src={cloud} alt="icon" style={{ width: '200px' }} />
              </div>
            </div>
            <div className="weather-bottom">
              <div className="weather-metric">
                <p>Temperature</p>
                <h3>{Math.round(weather.temp)}¬∞C</h3>
              </div>
              <div className="weather-metric">
                <p>Humidity</p>
                <h3>{weather.humidity}%</h3>
              </div>
              <div className="weather-metric">
                <p>Air Quality</p>
                <h3>(No Data)</h3>
              </div>
            </div>
          </div>
        ) : (
          <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®...</p>
        )}
      </section>

      {/* ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ */}
      <SensorCards
        temp={temp}
        humidity={humidity}
        lux={lux}
        rain={rain}
        isStale={isStale}
        hasData={hasData}
      />

      {/* ‡πÅ‡∏ñ‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ RTDB */}
      {rtdbLoading && <div className="banner info">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å RTDB...</div>}

      {!rtdbLoading && !connected && (
        <div className="banner warn">‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ RTDB</div>
      )}

      {/* ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÄ‡∏•‡∏¢‡∏à‡∏£‡∏¥‡∏á ‡πÜ (‡πÅ‡∏°‡πâ prefill ‡∏Å‡πá‡∏ß‡πà‡∏≤‡∏á) */}
      {!rtdbLoading && connected && !hadHistory && !rtdbError && (
        <div className="banner neutral">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏π‡πâ {cabinetId}</div>
      )}

      {/* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÇ‡∏ä‡∏ß‡πå‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏° + ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô stale */}
      {hasData && isStale && (
        <div className="banner warn">
          ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ {STALE_MS / 60000} ‡∏ô‡∏≤‡∏ó‡∏µ (timestamp ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {lastTs ? new Date(lastTs).toLocaleString('th-TH') : '-'})
        </div>
      )}

      {rtdbError && (
        <div className="banner error">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î RTDB: {rtdbError}</div>
      )}
    </div>
  );
};

export default Home;
